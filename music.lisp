(defparameter *notes*
  '((C  617) (Cs 653) (D  692)  (Ds 733)
    (E  777) (F  823) (Fs 872)  (G  924)
    (Gs 979) (A 1037) (As 1099) (B 1164)))

(defparameter *octaves* '(0 1))
(defparameter *tempo* 10)

(defparameter *johnny*
  '((2 (0 0 D))
    (2 (0 0 G))
    (2 (0 0 G))
    (2 (0 0 G))
    (4 (0 0 G))
    (2 (0 0 A))
    (4 (0 0 As))
    (2 (0 0 A))
    (4 (0 0 As))
    (2 (0 0 G))
    (10(0 0 F))
    (2 (0 0 D))
    (10(0 0 F))
    (2 (0 0 D))
    (2 (0 0 G))
    (2 (0 0 G))
    (2 (0 0 G))
    (4 (0 0 G))
    (2 (0 0 A))
    (4 (0 0 As))
    (2 (0 0 A))
    (4 (0 0 As))
    (2 (0 1 C))
    (10(0 1 D))
    (2 (0 0 As))
    (8 (0 1 D))
    (2 (0 0 As))
    (2 (0 1 C))
    (4 (0 1 D))
    (2 (0 1 D))
    (2 (0 1 D))
    (2 (0 1 C))
    (2 (0 0 As))
    (4 (0 1 C))
    (2 (0 1 C))
    (2 (0 1 C))
    (2 (0 0 As))
    (2 (0 0 A))
    (4 (0 0 As))
    (2 (0 0 As))
    (2 (0 0 As))
    (2 (0 0 A))
    (2 (0 0 G))
    (4 (0 0 A))
    (2 (0 0 A))
    (2 (0 0 A))
    (2 (0 0 As))
    (2 (0 1 C))
    (6 (0 1 D))
    (6 (0 1 C))
    (6 (0 0 As))
    (6 (0 0 A))
    (2 (0 0 G))
    (2 (0 0 G))
    (2 (0 0 G))
    (4 (0 0 G))
    (2 (0 0 F))
    (10(0 0 G))))

(defun save-bytes (out bytes)
  (let ((count 0))
    (dolist (b bytes)
      (format out "0x~2,'0X, " b)
      (when (>= (incf count) 8)
	(format out "~%")
	(setf count 0)))
    (when (/= count 0)
      (format out "~%"))))

(defun save-array (out name bytes)
  (format out "const byte ~A[] = {~%" name)
  (save-bytes out bytes)
  (format out "};~%"))

(defun bit-n (x)
  (ash 1 x))

(defun select-channels (chord)
  (reduce #'logior (mapcar #'bit-n (mapcar #'first (rest chord)))))

(defun lookup-note (note)
  (let ((octave (+ (elt *octaves* (first note)) (second note)))
	(frequency (second (assoc (third note) *notes*))))
    (list (logior (ash frequency -8) (ash octave 3))
	  (logand frequency #xff))))

(defun save-score (score)
  (let ((result nil))
    (dolist (chord score)
      (push (select-channels chord) result)
      (dolist (note (rest chord))
	(dolist (x (lookup-note note))
	  (push x result)))
      (push (* (first chord) *tempo*) result))
    (push 0 result)
    (reverse result)))

(defun duplicate-channel (score i new)
  (dolist (x score)
    (when (null (assoc new (rest x)))
      (let ((note (copy-list (assoc i (rest x)))))
	(setf (first note) new)
	(setf (rest (last x)) (list note))))))

(defun save-music ()
  (duplicate-channel *johnny* 0 1)
  (with-open-file (out "music.inc" :if-exists :supersede :direction :output)
    (save-array out "johnny_score" (save-score *johnny*))))

(defun save-and-quit ()
  (save-music)
  (quit))
