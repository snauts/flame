(defparameter *w* 64)
(defparameter *h* 12)

(defun get-x (i)
  (mod i *w*))

(defun get-y (i)
  (floor i *w*))

(defun distance (x1 y1 x2 y2)
  (+ (expt (- x2 x1) 2)
     (expt (- y2 y1) 2)))

(defun wrap-distance (x1 y1 x2 y2)
  (min (distance x1 y1 x2 y2)
       (distance (+ *w* x1) y1 x2 y2)
       (distance x1 y1 (+ *w* x2) y2)))

(defun aref-idx (map i)
  (aref map (get-x i) (get-y i)))

(defun one-goodness (map stats i j)
  (let ((x1 (get-x i)) (y1 (get-y i))
	(x2 (get-x j)) (y2 (get-y j)))
    (when (= 1 (aref map x1 y1) (aref map x2 y2))
      (let* ((len (wrap-distance x1 y1 x2 y2))
	     (record (assoc len stats)))
	(if (null record)
	    (push (list len 1) stats)
	    (incf (second record)))))
    stats))

(defun pos-goodness (map stats i)
  (when (= 1 (aref-idx map i))
    (loop for j from (1+ i) to (1- (* *w* *h*)) do
      (setf stats (one-goodness map stats i j))))
  stats)

(defun goodness (map)
  (let ((stats nil))
    (dotimes (i (1- (* *w* *h*)))
      (setf stats (pos-goodness map stats i)))
    (sort stats #'< :key #'first)))

(defun format-intervals (map)
  (let ((interval 0))
    (format t "const byte cacti_spacing[] = {~%")
    (dotimes (i (* *w* *h*))
      (cond ((= 0 (aref-idx map i))
	     (incf interval))
	    (t (format t "~A, " (* 2 (1+ interval)))
	       (setf interval 0))))
    (format t "};~%")))

(defun display (map)
  (format-intervals map)
  (dotimes (j *h*)
    (dotimes (i *w*)
      (format t "~A" (if (= 1 (aref map i j)) #\o #\.)))
    (format t "~%"))
  (format t "~%"))

(defun is-better (stats1 stats2)
  (let ((head1 (first stats1))
	(head2 (first stats2)))
    (cond ((null head1) t)
	  ((null head2) nil)
	  ((> (first head1) (first head2)) t)
	  ((< (first head1) (first head2)) nil)
	  ((< (second head1) (second head2)) t)
	  ((> (second head1) (second head2)) nil)
	  (t (is-better (rest stats1) (rest stats2))))))

(defun swap (map x1 x2 y)
  (let ((tmp (aref map x1 y)))
    (setf (aref map x1 y) (aref map x2 y))
    (setf (aref map x2 y) tmp)))

(defun random-elt (from)
  (elt from (random (length from))))

(defun pick (map y c)
  (let ((candidates nil))
    (dotimes (x *w* (random-elt candidates))
      (when (= c (aref map x y))
	(push x candidates)))))

(defun mutate (map stats)
  (let* ((row (random *h*))
	 (x1 (pick map row 0))
	 (x2 (pick map row 1)))
    (swap map x1 x2 row)
    (let ((new-stats (goodness map)))
      (cond ((is-better new-stats stats)
	     new-stats)
	    (t (swap map x1 x2 row)
	       stats)))))

(defun cacti ()
  (let ((map (make-array (list *w* *h*))))
    (dotimes (j *h*)
      (dotimes (i (1+ j))
	(setf (aref map (* (+ 2 (random 3)) i) (- 11 j)) 1)))
    (let ((stats (goodness map)))
      (loop (let ((new-stats (mutate map stats)))
	      (when (not (eq stats new-stats))
		(setf stats new-stats)
		(display map)))))))
